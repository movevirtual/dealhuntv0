-- Create deals table
create table public.deals (
  id bigint generated by default as identity primary key,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null,
  
  -- Basic Info
  title text not null,
  description text not null,
  long_description text not null,
  url text not null,
  
  -- Deal Details
  category text not null,
  discount text not null,
  creator text not null,
  promo_code text,
  featured boolean default false,
  
  -- Features & Stats
  features text[] not null default '{}',
  stats jsonb default '{}',
  
  -- Reviews
  reviews jsonb[] default array[]::jsonb[],
  
  -- Metadata
  start_date timestamp with time zone default timezone('utc'::text, now()),
  end_date timestamp with time zone,
  active boolean default true,
  views integer default 0,
  clicks integer default 0,
  
  -- Votes (we'll keep these for analytics even though we use localStorage for display)
  upvotes integer default 0,
  downvotes integer default 0
);

-- Enable Row Level Security (RLS)
alter table public.deals enable row level security;

-- Create policies
create policy "Enable read access for all users" on public.deals
  for select using (true);

create policy "Enable insert for authenticated users only" on public.deals
  for insert with check (auth.role() = 'authenticated');

create policy "Enable update for authenticated users only" on public.deals
  for update using (auth.role() = 'authenticated');

-- Create function to update updated_at timestamp
create or replace function public.handle_updated_at()
returns trigger as $$
begin
  new.updated_at = timezone('utc'::text, now());
  return new;
end;
$$ language plpgsql;

-- Create trigger to automatically update updated_at
create trigger set_updated_at
  before update on public.deals
  for each row
  execute function public.handle_updated_at();